(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("d:/RYB/work/schedule.org")))
 '(org-export-backends (quote (ascii html icalendar latex md odt)))
 '(org-log-into-drawer t)
 '(package-selected-packages
   (quote
    (ace-window zenburn-theme indent-guide elisp-format openwith multiple-cursors iedit wgrep expand-region yasnippet-snippets use-package auctex counsel ivy deft markdown-mode company yasnippet cnfonts)))
)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)
;; general settings
(tool-bar-mode 0)
(scroll-bar-mode 0)
;; (global-display-line-numbers-mode)
(setq auto-save-default nil)
(global-visual-line-mode 1) ;; wrap word in a better way
(electric-pair-mode 1)
(setq inhibit-startup-screen t)
(setq system-time-locale "C")
(set-language-environment "UTF-8")
(setq make-backup-files nil)
(save-place-mode 1)
(setq find-program "D:\\msys64\\usr\\bin\\find.exe")
(setq use-package-verbose t)
;; Open recent files
(recentf-mode 1)
(global-set-key (kbd "<f7>") 'recentf-open-files)
;; Auto generated by cnfonts
;; <https://github.com/tumashu/cnfonts>
(set-face-attribute
'default nil
:font (font-spec :name "-outline-Consolas-bold-italic-normal-mono-*-*-*-*-c-*-iso10646-1"
      :weight 'normal
      :slant 'normal
      :size 14.0))
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font) charset (font-spec :name
                   "-outline-微软雅黑-normal-normal-normal-sans-*-*-*-*-p-*-iso10646-1"
                   :weight 'normal
                   :slant 'normal
                   :size 12.5)))
;; find aspell and hunspell automatically
(cond
;; try hunspell at first
;; if hunspell does NOT exist, use aspell
((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "en_US")
  (setq ispell-hunspell-dictionary-alist
        ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
        ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
((executable-find "aspell")
  (setq ispell-program-name "aspell")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
;;  ace-window
(use-package ace-window
  :ensure t 
  :bind ("<f12>" . 'ace-window)
  :config
  (setq aw-dispatch-always t))
;; zenburn-theme
(use-package zenburn-theme
  :ensure t
  :config
  (load-theme 'zenburn t))
;;  Openwith
(use-package
  openwith
  :config (progn (when
         (require 'openwith nil 'noerror)
       (setq openwith-associations (list
            ;; (list (openwith-make-extension-regexp
            ;;        '("mpg" "mpeg" "mp3" "mp4"
            ;;          "avi" "wmv" "wav" "mov" "flv"
            ;;          "ogm" "ogg" "mkv"))
            ;;       "audacious"
            ;;       '(file))
            ;; (list (openwith-make-extension-regexp
            ;;        '("xbm" "pbm" "pgm" "ppm" "pnm"
            ;;          "png" "bmp" "tif" "jpeg" "jpg"))
            ;;       "gpicview"
            ;;       '(file))
            (list (openwith-make-extension-regexp '("pdf"))
                  "SumatraPDF.exe" '(file))
            (list (openwith-make-extension-regexp '("doc"
                      "docx"))
                  "Word.exe" '(file))))
       (openwith-mode 1)))
  :ensure t)
;; deft
(use-package
  deft
  :ensure t
  :bind ("<f8>" . deft)
  :config 
  (setq deft-extensions '("org"))
  (setq deft-directory "D:/RYB/work")
  (setq deft-recursive t)
  (setq deft-auto-save-interval 0)
  ;; (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-org-mode-title-prefix t)
  ;; (setq deft-auto-save-interval nil)
  (setq deft-file-naming-rules '((noslash . "-")
         (nospace . "-")
         (case-fn . downcase))))
;; Shortcuts for Markdown
(use-package markdown-mode
  :config
  (setq markdown-command "pandoc"))
;; Org mode settings
(use-package
  org
  :bind ("<f9>" . org-emphasize)
  ;; :hook (org-mode . org-indent-mode)
  :config
  (setq org-startup-truncated nil)
  (setq org-refile-targets '((nil :maxlevel . 3))))
;; ivy counsel swiper
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  :bind
  (("\C-s" . swiper)
  ("<f6>" . ivy-resume)
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("<f1> f" . counsel-describe-function)
  ("<f1> v" . counsel-describe-variable)
  ("<f1> l" . counsel-find-library)
  ("<f2> i" . counsel-info-lookup-symbol)))
;; Highlight indent
(use-package indent-guide
  :ensure t)
;; Elisp auto format
(use-package elisp-format
  :ensure t)
;; yasnippet
(use-package
  yasnippet
  :ensure t
  :hook (org-mode . yas-minor-mode)
  :config
  ;; (use-package yasnippet-snippets)
  (bind-key "<f5>" 'yas-insert-snippet))
(use-package
  yasnippet-snippets
  :ensure t
  :after (yasnippet))
;; expand region
(use-package
  expand-region
  :ensure t
  :bind ("C-=" . 'er/expand-region))
;; Auctex
(use-package
  auctex
  :ensure t
  :hook (LaTeX-mode . LaTeX-math-mode)
  :config (setq TeX-auto-save t)
  (setq TeX-parse-self t))
;; (setq TeX-auto-save t)
;; (setq TeX-parse-self t)
;; (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
;; company
(use-package
  company
  :ensure t
  :hook (after-init . global-company-mode)
  :config (setq company-dabbrev-downcase nil))
;; (use-package occur
;;   :bind ("M-n" . next-logical-line))
(put 'narrow-to-region 'disabled nil)
(use-package
  multiple-cursors
  :ensure t
  :init (setq mc/always-repeat-command t)
  (setq mc/always-run-for-all t))
;; Functions ------------------------------------------
(defun copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffer.
      - If region is active, copy its lines."
  (interactive "p")
  (let ((beg (line-beginning-position))
  (end (line-end-position arg)))
    (when mark-active (if (> (point)
           (mark))
        (setq beg (save-excursion (goto-char (mark))
                (line-beginning-position)))
      (setq end (save-excursion (goto-char (mark))
              (line-end-position)))))
    (if (eq last-command 'copy-line)
  (kill-append
   (buffer-substring
    beg
    end)
   (< end beg))
      (kill-ring-save beg end)))
  (kill-append "\n" nil)
  (beginning-of-line (or (and arg
            (1+ arg))
       2))
  (if (and arg
     (not (= 1 arg)))
      (message "%d lines copied" arg)))
